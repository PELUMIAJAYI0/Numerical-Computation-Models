import numpy as np
import scipy.optimize as opt
import matplotlib.pyplot as plt

# Constants
air_density = 1.225  # kg/m^3 (air density at sea level)
tip_speed_ratio = 8  # Tip speed ratio for maximum efficiency (estimated)
wind_speed = 12  # m/s (wind speed)
rotor_radius = 50  # meters (radius of the wind turbine rotor)

# Blade Element Momentum (BEM) Theory Functions
def bem_theory(blade_length, pitch_angle, wind_speed, air_density):
    """
    Blade Element Momentum (BEM) Theory to calculate turbine efficiency.
    
    Parameters:
    - blade_length: Blade length at each radial position (m).
    - pitch_angle: Angle of the turbine blade (degrees).
    - wind_speed: Wind speed (m/s).
    - air_density: Air density (kg/m^3).
    
    Returns:
    - Power generated by the turbine (Watts).
    """
    # Blade Element Parameters
    num_segments = 10
    r = np.linspace(1, rotor_radius, num_segments)  # Radial positions along the blade length
    dr = r[1] - r[0]
    
    # Variables
    cp = 0.5  # Power coefficient (theoretical value)
    lambda_ = wind_speed * rotor_radius / (tip_speed_ratio * r)  # Tip speed ratio at each radial position
    
    # Calculation of the aerodynamic forces for each segment
    power = 0
    for i in range(num_segments):
        # Assuming constant aerodynamic efficiency
        local_power = 0.5 * air_density * (wind_speed ** 3) * cp * r[i] * dr  # Power for each segment
        power += local_power  # Sum up power from all segments
    
    return power

# Objective Function for Optimization
def optimize_blade_design(x):
    """
    Objective function to optimize turbine blade design for maximum power.
    
    Parameters:
    - x: Array containing the pitch angle and blade length.
    
    Returns:
    - Negative power (to minimize the negative of power, maximizing the power).
    """
    pitch_angle = x[0]
    blade_length = x[1]
    
    return -bem_theory(blade_length, pitch_angle, wind_speed, air_density)

# Initial guess for optimization: pitch angle = 10 degrees, blade length = 40 meters
initial_guess = [10, 40]

# Optimization using SciPy
result = opt.minimize(optimize_blade_design, initial_guess, bounds=[(0, 30), (30, 70)])  # Bounds for pitch and blade length

# Extract the optimized values
optimized_pitch = result.x[0]
optimized_blade_length = result.x[1]

# Calculate the power with optimized design
optimized_power = -result.fun  # The negative value is minimized in optimization

# Display the results
print(f"Optimized Pitch Angle: {optimized_pitch:.2f} degrees")
print(f"Optimized Blade Length: {optimized_blade_length:.2f} meters")
print(f"Power Generated by Optimized Turbine: {optimized_power/1e6:.2f} MW")

# Visualization of Power Generation
blade_lengths = np.linspace(30, 70, 100)
pitch_angles = np.linspace(0, 30, 100)
power_grid = np.zeros((100, 100))

for i, blade_length in enumerate(blade_lengths):
    for j, pitch_angle in enumerate(pitch_angles):
        power_grid[i, j] = -optimize_blade_design([pitch_angle, blade_length])  # Negative of the minimized value

# Plotting the optimization result
plt.figure(figsize=(10, 6))
plt.contourf(pitch_angles, blade_lengths, power_grid.T, cmap='inferno', levels=50)
plt.colorbar(label='Power (W)')
plt.xlabel('Pitch Angle (Degrees)')
plt.ylabel('Blade Length (Meters)')
plt.title('Power Optimization for Wind Turbine Design')
plt.scatter(optimized_pitch, optimized_blade_length, color='red', marker='x', label='Optimized Design')
plt.legend()
plt.show()
